Q: How did viewing a diff between two versions of a file help you see the bug that was introduced?
It made it so I didn't have to compare the code line by line myself. The computer was able to do that much faster and more accurately.
I still do find it a little difficult to clearly understand the output of git. I'm not really sure how it references line numbers for instance.

Q: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
You could see how it evolved over time.
It could give you the tools to see how the code ended up the way it is now.
Hopefully you would see where the code had been refactored and sections of the code streamlined or improved.

Q: What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
You might waste time and energy dithering about whether to commit a change or not.
Choosing when to commit and forcing yourself to write a comment about it might make you think more about the work you have just done. This would probably be a good thing.
Automatic saves might happen to often or too infrequently.

Q: Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
It could be because managing multiple files in one commit is more complicated and so the designers of a system don't do it unless it is necesary. 
And for some systems like Google Docs, the main usage would be around files that are discrete entitites and so don't have to be managed together.
But with Git, quite often the files will have dependencies on each other.

Q: How can you use the commands git log and git diff to view the history of files?
Git log is good to look for commits and find a point in time when a change was made.
You can then use git diff to compare that commit with a previous or later commit.
